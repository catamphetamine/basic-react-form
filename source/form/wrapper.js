import { Component, createElement } from 'react'
import ReactDOM from 'react-dom'

// Build an outer component
// with the only purpose
// to expose instance API methods
export default function build_outer_component(Connected_form, options)
{
	const wrapper = class ReduxForm extends Component
	{
		constructor()
		{
			super()

			this.get_form_id = this.get_form_id.bind(this)

			this.ref    = this.ref.bind(this)
			this.focus  = this.focus.bind(this)
			this.scroll = this.scroll.bind(this)
			this.clear  = this.clear.bind(this)
			this.set    = this.set.bind(this)
		}

		ref()
		{
			return this.connected_form.getWrappedInstance().refs.user_form
		}

		focus(field)
		{
			return this.connected_form.getWrappedInstance().focus(field)
		}

		scroll(field)
		{
			return this.connected_form.getWrappedInstance().scroll_to_field(field)
		}

		clear(field)
		{
			return this.connected_form.getWrappedInstance().clear_field(field)
		}

		get(field)
		{
			return this.connected_form.getWrappedInstance().get_field_value(field)
		}

		set(field, value)
		{
			return this.connected_form.getWrappedInstance().set_field(field, value)
		}

		// Gets the latest focused field (public API).
		// (e.g. for Google Analytics on abandoned forms)
		get_latest_focused_field()
		{
			return this.connected_form.getWrappedInstance().get_latest_focused_field()
		}

		// camelCase aliasing
		getLatestFocusedField()
		{
			return this.get_latest_focused_field()
		}

		reset()
		{
			return this.connected_form.getWrappedInstance().reset()
		}

		submit()
		{
			return submit_child_form(ReactDOM.findDOMNode(this.connected_form))
		}

		// // For tests
		// get wrappedInstance()
		// {
		// 	return this.connected_form.getWrappedInstance().refs.wrapped
		// }

		// Autogenerates form id and keeps returning it from then on.
		// The form id is stored in `this.form_id` instance variable.
		// This way every time a form is mounted
		// (if it's not reused by React in which case `key`s will do the trick)
		// a new form id is generated.
		get_form_id(state, props, options)
		{
			// If this function is called a subsequent time
			// then return an already autogenerated form id.
			if (!this.form_id)
			{
				this.form_id = get_form_id(state, props, options)
			}

			return this.form_id
		}

		render()
		{
			return createElement(Connected_form,
			{
				...this.props,
				ref         : ref => this.connected_form = ref,
				get_form_id : this.get_form_id
			})
		}
	}

	// Proxy some instance methods (if specified)
	if (options.methods)
	{
		for (const method of options.methods)
		{
			if (wrapper.prototype[method])
			{
				console.error(`Form method "${method}" is already defined`)
			}

			wrapper.prototype[method] = function()
			{
				const instance_method = this.ref()[method]

				if (!instance_method)
				{
					throw new Error(`Instance method not found: "${method}"`)
				}

				instance_method.apply(this, arguments)
			}
		}
	}

	return wrapper
}

// Get form id
function get_form_id(state, props, options)
{
	// If `id` was set in the decorator options
	if (options.id)
	{
		// `id` can be either a String or a Function of `props`
		return typeof options.id === 'string' ? options.id : options.id(props)
	}

	// camelCase aliasing for `formId` property on the decorated component
	if (props.form_id || props.formId)
	{
		return props.form_id || props.formId
	}

	// Autogenerate @Form() `id`.
	return autogenerate_form_id(state.form)
}

// Autogenerate @Form() `id`
//
// `@connect()` will be called in `Form` constructor,
// and form is registered in `componentWillMount` of a `Form`,
// which means that theoretically if two forms
// were created side-by-side in a parent component
// and then mounted inside it, then there potentially
// could be an ID collision, but that's very unlikely.
//
function autogenerate_form_id(forms)
{
	// Generate a random form ID.
	// Since there's no multiply-and-floor involved here
	// it is considered really random (much safe, such PRNG)
	// https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d
	const id = String(Math.random()).slice(2)

	// If this form ID is already taken,
	// then try another one.
	if (forms[id])
	{
		return autogenerate_form_id(forms)
	}

	return id
}

export function submit_child_form(node)
{
	while (node.firstChild)
	{
		node = node.firstChild
		if (node instanceof HTMLFormElement)
		{
			// Won't use `node.submit()` because it bypasses `onSubmit`.
			// Will click the submit button instead.
			const submit = node.querySelector('button[type=submit]')
			if (submit)
			{
				submit.click()
				return true
			}
		}
	}
}
